Creating a simple web app to allow users to download videos or audio using yt-dlp involves several steps. Below is a basic example using Python with Flask as the web framework. This example assumes you have Python and Flask installed on your system.

Step 1: Install Required Packages
First, ensure you have yt-dlp and Flask installed:

pip install yt-dlp Flask
Step 2: Create the Flask Application
Create a new directory for your project and navigate into it. Then, create a file named app.py:

from flask import Flask, request, render_template_string, send_file
import os
import subprocess
import tempfile

app = Flask(__name__)

# HTML template for the form
HTML_TEMPLATE = """
<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>Video/Audio Downloader</title>
</head>
<body>
    <h1>Download Video/Audio</h1>
    <form method="post" action="/download">
        <label for="url">Enter URL:</label>
        <input type="text" id="url" name="url" required>
        <br>
        <label for="format">Choose Format:</label>
        <select id="format" name="format">
            <option value="video">Video</option>
            <option value="audio">Audio</option>
        </select>
        <br>
        <button type="submit">Download</button>
    </form>
</body>
</html>
"""

@app.route('/', methods=['GET'])
def index():
    return render_template_string(HTML_TEMPLATE)

@app.route('/download', methods=['POST'])
def download():
    url = request.form['url']
    format_type = request.form['format']

    # Create a temporary directory to store the downloaded file
    temp_dir = tempfile.mkdtemp()
    output_path = os.path.join(temp_dir, 'output')

    # Determine the yt-dlp options based on the selected format
    if format_type == 'video':
        options = ['-x', '--audio-format', 'mp3']  # Download audio
    else:
        options = ['-f', 'bestvideo+bestaudio']  # Download video

    # Run yt-dlp to download the file
    try:
        result = subprocess.run(
            ['yt-dlp'] + options + [url],
            cwd=temp_dir,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        if result.returncode != 0:
            return f"Error downloading file: {result.stderr}"

        # Get the downloaded file path
        downloaded_files = os.listdir(temp_dir)
        if not downloaded_files:
            return "No file downloaded."

        # Send the file to the client
        return send_file(os.path.join(temp_dir, downloaded_files[0]), as_attachment=True)
    except Exception as e:
        return f"An error occurred: {str(e)}"

if __name__ == '__main__':
    app.run(debug=True)
Step 3: Run the Application
To run the application, execute the following command in your terminal:

python app.py
This will start a local development server at http://127.0.0.1:5000/. You can open this URL in your web browser to use the downloader.

Step 4: Deploy the Application
To deploy the application, you can use a platform like Heroku, AWS, or any other cloud service that supports Python applications. Here's a brief overview of how you might deploy it to Heroku:

Create a requirements.txt file:

Flask==2.3.2
yt-dlp==2023.10.1
Create a Procfile:

web: python app.py
Initialize a Git repository and commit your changes:

git init
git add .
git commit -m "Initial commit"
Create a Heroku account and install the Heroku CLI.

Login to Heroku and create a new app:

heroku login
heroku create
Push your code to Heroku:

git push heroku master
Open your deployed app:

heroku open
Notes
Security: Ensure you handle user inputs carefully to prevent security vulnerabilities such as command injection.
Error Handling: The example includes basic error handling, but you might want to enhance it for production use.
Performance: For large files, consider implementing asynchronous downloads or streaming.
This is a basic example to get you started. Depending on your needs, you might want to add more features, such as progress tracking, file validation, or user authentication.
